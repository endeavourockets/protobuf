// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_2eproto;
namespace sensors {
class DataDHT;
class DataDHTDefaultTypeInternal;
extern DataDHTDefaultTypeInternal _DataDHT_default_instance_;
class DataGPS;
class DataGPSDefaultTypeInternal;
extern DataGPSDefaultTypeInternal _DataGPS_default_instance_;
class DataIMU;
class DataIMUDefaultTypeInternal;
extern DataIMUDefaultTypeInternal _DataIMU_default_instance_;
class SensorDHT;
class SensorDHTDefaultTypeInternal;
extern SensorDHTDefaultTypeInternal _SensorDHT_default_instance_;
class SensorGPS;
class SensorGPSDefaultTypeInternal;
extern SensorGPSDefaultTypeInternal _SensorGPS_default_instance_;
class SensorIMU;
class SensorIMUDefaultTypeInternal;
extern SensorIMUDefaultTypeInternal _SensorIMU_default_instance_;
}  // namespace sensors
PROTOBUF_NAMESPACE_OPEN
template<> ::sensors::DataDHT* Arena::CreateMaybeMessage<::sensors::DataDHT>(Arena*);
template<> ::sensors::DataGPS* Arena::CreateMaybeMessage<::sensors::DataGPS>(Arena*);
template<> ::sensors::DataIMU* Arena::CreateMaybeMessage<::sensors::DataIMU>(Arena*);
template<> ::sensors::SensorDHT* Arena::CreateMaybeMessage<::sensors::SensorDHT>(Arena*);
template<> ::sensors::SensorGPS* Arena::CreateMaybeMessage<::sensors::SensorGPS>(Arena*);
template<> ::sensors::SensorIMU* Arena::CreateMaybeMessage<::sensors::SensorIMU>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sensors {

// ===================================================================

class SensorGPS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensors.SensorGPS) */ {
 public:
  SensorGPS();
  virtual ~SensorGPS();

  SensorGPS(const SensorGPS& from);
  SensorGPS(SensorGPS&& from) noexcept
    : SensorGPS() {
    *this = ::std::move(from);
  }

  inline SensorGPS& operator=(const SensorGPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorGPS& operator=(SensorGPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorGPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorGPS* internal_default_instance() {
    return reinterpret_cast<const SensorGPS*>(
               &_SensorGPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorGPS& a, SensorGPS& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorGPS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorGPS* New() const final {
    return CreateMaybeMessage<SensorGPS>(nullptr);
  }

  SensorGPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorGPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorGPS& from);
  void MergeFrom(const SensorGPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorGPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensors.SensorGPS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_2eproto);
    return ::descriptor_table_sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 4,
    kTimestampFieldNumber = 3,
  };
  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .sensors.DataGPS data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::sensors::DataGPS& data() const;
  ::sensors::DataGPS* release_data();
  ::sensors::DataGPS* mutable_data();
  void set_allocated_data(::sensors::DataGPS* data);
  private:
  const ::sensors::DataGPS& _internal_data() const;
  ::sensors::DataGPS* _internal_mutable_data();
  public:

  // double timestamp = 3;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:sensors.SensorGPS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::sensors::DataGPS* data_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class DataGPS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensors.DataGPS) */ {
 public:
  DataGPS();
  virtual ~DataGPS();

  DataGPS(const DataGPS& from);
  DataGPS(DataGPS&& from) noexcept
    : DataGPS() {
    *this = ::std::move(from);
  }

  inline DataGPS& operator=(const DataGPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataGPS& operator=(DataGPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataGPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataGPS* internal_default_instance() {
    return reinterpret_cast<const DataGPS*>(
               &_DataGPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataGPS& a, DataGPS& b) {
    a.Swap(&b);
  }
  inline void Swap(DataGPS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataGPS* New() const final {
    return CreateMaybeMessage<DataGPS>(nullptr);
  }

  DataGPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataGPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataGPS& from);
  void MergeFrom(const DataGPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataGPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensors.DataGPS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_2eproto);
    return ::descriptor_table_sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // float latitude = 1;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // float longitude = 2;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensors.DataGPS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float latitude_;
  float longitude_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class SensorIMU :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensors.SensorIMU) */ {
 public:
  SensorIMU();
  virtual ~SensorIMU();

  SensorIMU(const SensorIMU& from);
  SensorIMU(SensorIMU&& from) noexcept
    : SensorIMU() {
    *this = ::std::move(from);
  }

  inline SensorIMU& operator=(const SensorIMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorIMU& operator=(SensorIMU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorIMU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorIMU* internal_default_instance() {
    return reinterpret_cast<const SensorIMU*>(
               &_SensorIMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorIMU& a, SensorIMU& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorIMU* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorIMU* New() const final {
    return CreateMaybeMessage<SensorIMU>(nullptr);
  }

  SensorIMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorIMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorIMU& from);
  void MergeFrom(const SensorIMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorIMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensors.SensorIMU";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_2eproto);
    return ::descriptor_table_sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 4,
    kTimestampFieldNumber = 3,
  };
  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .sensors.DataIMU data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::sensors::DataIMU& data() const;
  ::sensors::DataIMU* release_data();
  ::sensors::DataIMU* mutable_data();
  void set_allocated_data(::sensors::DataIMU* data);
  private:
  const ::sensors::DataIMU& _internal_data() const;
  ::sensors::DataIMU* _internal_mutable_data();
  public:

  // double timestamp = 3;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:sensors.SensorIMU)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::sensors::DataIMU* data_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class DataIMU :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensors.DataIMU) */ {
 public:
  DataIMU();
  virtual ~DataIMU();

  DataIMU(const DataIMU& from);
  DataIMU(DataIMU&& from) noexcept
    : DataIMU() {
    *this = ::std::move(from);
  }

  inline DataIMU& operator=(const DataIMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataIMU& operator=(DataIMU&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataIMU& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataIMU* internal_default_instance() {
    return reinterpret_cast<const DataIMU*>(
               &_DataIMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataIMU& a, DataIMU& b) {
    a.Swap(&b);
  }
  inline void Swap(DataIMU* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataIMU* New() const final {
    return CreateMaybeMessage<DataIMU>(nullptr);
  }

  DataIMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataIMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataIMU& from);
  void MergeFrom(const DataIMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataIMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensors.DataIMU";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_2eproto);
    return ::descriptor_table_sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensors.DataIMU)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class SensorDHT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensors.SensorDHT) */ {
 public:
  SensorDHT();
  virtual ~SensorDHT();

  SensorDHT(const SensorDHT& from);
  SensorDHT(SensorDHT&& from) noexcept
    : SensorDHT() {
    *this = ::std::move(from);
  }

  inline SensorDHT& operator=(const SensorDHT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDHT& operator=(SensorDHT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDHT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDHT* internal_default_instance() {
    return reinterpret_cast<const SensorDHT*>(
               &_SensorDHT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SensorDHT& a, SensorDHT& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDHT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDHT* New() const final {
    return CreateMaybeMessage<SensorDHT>(nullptr);
  }

  SensorDHT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDHT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDHT& from);
  void MergeFrom(const SensorDHT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDHT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensors.SensorDHT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_2eproto);
    return ::descriptor_table_sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 4,
    kTimestampFieldNumber = 3,
  };
  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .sensors.DataDHT data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::sensors::DataDHT& data() const;
  ::sensors::DataDHT* release_data();
  ::sensors::DataDHT* mutable_data();
  void set_allocated_data(::sensors::DataDHT* data);
  private:
  const ::sensors::DataDHT& _internal_data() const;
  ::sensors::DataDHT* _internal_mutable_data();
  public:

  // double timestamp = 3;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:sensors.SensorDHT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::sensors::DataDHT* data_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensors_2eproto;
};
// -------------------------------------------------------------------

class DataDHT :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sensors.DataDHT) */ {
 public:
  DataDHT();
  virtual ~DataDHT();

  DataDHT(const DataDHT& from);
  DataDHT(DataDHT&& from) noexcept
    : DataDHT() {
    *this = ::std::move(from);
  }

  inline DataDHT& operator=(const DataDHT& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataDHT& operator=(DataDHT&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataDHT& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataDHT* internal_default_instance() {
    return reinterpret_cast<const DataDHT*>(
               &_DataDHT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataDHT& a, DataDHT& b) {
    a.Swap(&b);
  }
  inline void Swap(DataDHT* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataDHT* New() const final {
    return CreateMaybeMessage<DataDHT>(nullptr);
  }

  DataDHT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataDHT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataDHT& from);
  void MergeFrom(const DataDHT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataDHT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sensors.DataDHT";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_2eproto);
    return ::descriptor_table_sensors_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTemperatureFieldNumber = 1,
    kHumidityFieldNumber = 2,
  };
  // float temperature = 1;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float humidity = 2;
  void clear_humidity();
  float humidity() const;
  void set_humidity(float value);
  private:
  float _internal_humidity() const;
  void _internal_set_humidity(float value);
  public:

  // @@protoc_insertion_point(class_scope:sensors.DataDHT)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float temperature_;
  float humidity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorGPS

// string device = 1;
inline void SensorGPS::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorGPS::device() const {
  // @@protoc_insertion_point(field_get:sensors.SensorGPS.device)
  return _internal_device();
}
inline void SensorGPS::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:sensors.SensorGPS.device)
}
inline std::string* SensorGPS::mutable_device() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorGPS.device)
  return _internal_mutable_device();
}
inline const std::string& SensorGPS::_internal_device() const {
  return device_.GetNoArena();
}
inline void SensorGPS::_internal_set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorGPS::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensors.SensorGPS.device)
}
inline void SensorGPS::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.SensorGPS.device)
}
inline void SensorGPS::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.SensorGPS.device)
}
inline std::string* SensorGPS::_internal_mutable_device() {
  
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorGPS::release_device() {
  // @@protoc_insertion_point(field_release:sensors.SensorGPS.device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorGPS::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorGPS.device)
}

// string type = 2;
inline void SensorGPS::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorGPS::type() const {
  // @@protoc_insertion_point(field_get:sensors.SensorGPS.type)
  return _internal_type();
}
inline void SensorGPS::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensors.SensorGPS.type)
}
inline std::string* SensorGPS::mutable_type() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorGPS.type)
  return _internal_mutable_type();
}
inline const std::string& SensorGPS::_internal_type() const {
  return type_.GetNoArena();
}
inline void SensorGPS::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorGPS::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensors.SensorGPS.type)
}
inline void SensorGPS::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.SensorGPS.type)
}
inline void SensorGPS::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.SensorGPS.type)
}
inline std::string* SensorGPS::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorGPS::release_type() {
  // @@protoc_insertion_point(field_release:sensors.SensorGPS.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorGPS::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorGPS.type)
}

// double timestamp = 3;
inline void SensorGPS::clear_timestamp() {
  timestamp_ = 0;
}
inline double SensorGPS::_internal_timestamp() const {
  return timestamp_;
}
inline double SensorGPS::timestamp() const {
  // @@protoc_insertion_point(field_get:sensors.SensorGPS.timestamp)
  return _internal_timestamp();
}
inline void SensorGPS::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void SensorGPS::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sensors.SensorGPS.timestamp)
}

// .sensors.DataGPS data = 4;
inline bool SensorGPS::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SensorGPS::has_data() const {
  return _internal_has_data();
}
inline void SensorGPS::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::sensors::DataGPS& SensorGPS::_internal_data() const {
  const ::sensors::DataGPS* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensors::DataGPS*>(
      &::sensors::_DataGPS_default_instance_);
}
inline const ::sensors::DataGPS& SensorGPS::data() const {
  // @@protoc_insertion_point(field_get:sensors.SensorGPS.data)
  return _internal_data();
}
inline ::sensors::DataGPS* SensorGPS::release_data() {
  // @@protoc_insertion_point(field_release:sensors.SensorGPS.data)
  
  ::sensors::DataGPS* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::sensors::DataGPS* SensorGPS::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensors::DataGPS>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::sensors::DataGPS* SensorGPS::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorGPS.data)
  return _internal_mutable_data();
}
inline void SensorGPS::set_allocated_data(::sensors::DataGPS* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorGPS.data)
}

// -------------------------------------------------------------------

// DataGPS

// float latitude = 1;
inline void DataGPS::clear_latitude() {
  latitude_ = 0;
}
inline float DataGPS::_internal_latitude() const {
  return latitude_;
}
inline float DataGPS::latitude() const {
  // @@protoc_insertion_point(field_get:sensors.DataGPS.latitude)
  return _internal_latitude();
}
inline void DataGPS::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void DataGPS::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:sensors.DataGPS.latitude)
}

// float longitude = 2;
inline void DataGPS::clear_longitude() {
  longitude_ = 0;
}
inline float DataGPS::_internal_longitude() const {
  return longitude_;
}
inline float DataGPS::longitude() const {
  // @@protoc_insertion_point(field_get:sensors.DataGPS.longitude)
  return _internal_longitude();
}
inline void DataGPS::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void DataGPS::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:sensors.DataGPS.longitude)
}

// float height = 3;
inline void DataGPS::clear_height() {
  height_ = 0;
}
inline float DataGPS::_internal_height() const {
  return height_;
}
inline float DataGPS::height() const {
  // @@protoc_insertion_point(field_get:sensors.DataGPS.height)
  return _internal_height();
}
inline void DataGPS::_internal_set_height(float value) {
  
  height_ = value;
}
inline void DataGPS::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sensors.DataGPS.height)
}

// -------------------------------------------------------------------

// SensorIMU

// string device = 1;
inline void SensorIMU::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorIMU::device() const {
  // @@protoc_insertion_point(field_get:sensors.SensorIMU.device)
  return _internal_device();
}
inline void SensorIMU::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:sensors.SensorIMU.device)
}
inline std::string* SensorIMU::mutable_device() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorIMU.device)
  return _internal_mutable_device();
}
inline const std::string& SensorIMU::_internal_device() const {
  return device_.GetNoArena();
}
inline void SensorIMU::_internal_set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorIMU::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensors.SensorIMU.device)
}
inline void SensorIMU::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.SensorIMU.device)
}
inline void SensorIMU::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.SensorIMU.device)
}
inline std::string* SensorIMU::_internal_mutable_device() {
  
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorIMU::release_device() {
  // @@protoc_insertion_point(field_release:sensors.SensorIMU.device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorIMU::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorIMU.device)
}

// string type = 2;
inline void SensorIMU::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorIMU::type() const {
  // @@protoc_insertion_point(field_get:sensors.SensorIMU.type)
  return _internal_type();
}
inline void SensorIMU::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensors.SensorIMU.type)
}
inline std::string* SensorIMU::mutable_type() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorIMU.type)
  return _internal_mutable_type();
}
inline const std::string& SensorIMU::_internal_type() const {
  return type_.GetNoArena();
}
inline void SensorIMU::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorIMU::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensors.SensorIMU.type)
}
inline void SensorIMU::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.SensorIMU.type)
}
inline void SensorIMU::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.SensorIMU.type)
}
inline std::string* SensorIMU::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorIMU::release_type() {
  // @@protoc_insertion_point(field_release:sensors.SensorIMU.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorIMU::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorIMU.type)
}

// double timestamp = 3;
inline void SensorIMU::clear_timestamp() {
  timestamp_ = 0;
}
inline double SensorIMU::_internal_timestamp() const {
  return timestamp_;
}
inline double SensorIMU::timestamp() const {
  // @@protoc_insertion_point(field_get:sensors.SensorIMU.timestamp)
  return _internal_timestamp();
}
inline void SensorIMU::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void SensorIMU::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sensors.SensorIMU.timestamp)
}

// .sensors.DataIMU data = 4;
inline bool SensorIMU::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SensorIMU::has_data() const {
  return _internal_has_data();
}
inline void SensorIMU::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::sensors::DataIMU& SensorIMU::_internal_data() const {
  const ::sensors::DataIMU* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensors::DataIMU*>(
      &::sensors::_DataIMU_default_instance_);
}
inline const ::sensors::DataIMU& SensorIMU::data() const {
  // @@protoc_insertion_point(field_get:sensors.SensorIMU.data)
  return _internal_data();
}
inline ::sensors::DataIMU* SensorIMU::release_data() {
  // @@protoc_insertion_point(field_release:sensors.SensorIMU.data)
  
  ::sensors::DataIMU* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::sensors::DataIMU* SensorIMU::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensors::DataIMU>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::sensors::DataIMU* SensorIMU::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorIMU.data)
  return _internal_mutable_data();
}
inline void SensorIMU::set_allocated_data(::sensors::DataIMU* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorIMU.data)
}

// -------------------------------------------------------------------

// DataIMU

// float x = 1;
inline void DataIMU::clear_x() {
  x_ = 0;
}
inline float DataIMU::_internal_x() const {
  return x_;
}
inline float DataIMU::x() const {
  // @@protoc_insertion_point(field_get:sensors.DataIMU.x)
  return _internal_x();
}
inline void DataIMU::_internal_set_x(float value) {
  
  x_ = value;
}
inline void DataIMU::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sensors.DataIMU.x)
}

// float y = 2;
inline void DataIMU::clear_y() {
  y_ = 0;
}
inline float DataIMU::_internal_y() const {
  return y_;
}
inline float DataIMU::y() const {
  // @@protoc_insertion_point(field_get:sensors.DataIMU.y)
  return _internal_y();
}
inline void DataIMU::_internal_set_y(float value) {
  
  y_ = value;
}
inline void DataIMU::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sensors.DataIMU.y)
}

// float z = 3;
inline void DataIMU::clear_z() {
  z_ = 0;
}
inline float DataIMU::_internal_z() const {
  return z_;
}
inline float DataIMU::z() const {
  // @@protoc_insertion_point(field_get:sensors.DataIMU.z)
  return _internal_z();
}
inline void DataIMU::_internal_set_z(float value) {
  
  z_ = value;
}
inline void DataIMU::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sensors.DataIMU.z)
}

// -------------------------------------------------------------------

// SensorDHT

// string device = 1;
inline void SensorDHT::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorDHT::device() const {
  // @@protoc_insertion_point(field_get:sensors.SensorDHT.device)
  return _internal_device();
}
inline void SensorDHT::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:sensors.SensorDHT.device)
}
inline std::string* SensorDHT::mutable_device() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorDHT.device)
  return _internal_mutable_device();
}
inline const std::string& SensorDHT::_internal_device() const {
  return device_.GetNoArena();
}
inline void SensorDHT::_internal_set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorDHT::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensors.SensorDHT.device)
}
inline void SensorDHT::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.SensorDHT.device)
}
inline void SensorDHT::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.SensorDHT.device)
}
inline std::string* SensorDHT::_internal_mutable_device() {
  
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorDHT::release_device() {
  // @@protoc_insertion_point(field_release:sensors.SensorDHT.device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDHT::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorDHT.device)
}

// string type = 2;
inline void SensorDHT::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorDHT::type() const {
  // @@protoc_insertion_point(field_get:sensors.SensorDHT.type)
  return _internal_type();
}
inline void SensorDHT::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sensors.SensorDHT.type)
}
inline std::string* SensorDHT::mutable_type() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorDHT.type)
  return _internal_mutable_type();
}
inline const std::string& SensorDHT::_internal_type() const {
  return type_.GetNoArena();
}
inline void SensorDHT::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SensorDHT::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensors.SensorDHT.type)
}
inline void SensorDHT::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensors.SensorDHT.type)
}
inline void SensorDHT::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensors.SensorDHT.type)
}
inline std::string* SensorDHT::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorDHT::release_type() {
  // @@protoc_insertion_point(field_release:sensors.SensorDHT.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorDHT::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorDHT.type)
}

// double timestamp = 3;
inline void SensorDHT::clear_timestamp() {
  timestamp_ = 0;
}
inline double SensorDHT::_internal_timestamp() const {
  return timestamp_;
}
inline double SensorDHT::timestamp() const {
  // @@protoc_insertion_point(field_get:sensors.SensorDHT.timestamp)
  return _internal_timestamp();
}
inline void SensorDHT::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void SensorDHT::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sensors.SensorDHT.timestamp)
}

// .sensors.DataDHT data = 4;
inline bool SensorDHT::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SensorDHT::has_data() const {
  return _internal_has_data();
}
inline void SensorDHT::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::sensors::DataDHT& SensorDHT::_internal_data() const {
  const ::sensors::DataDHT* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sensors::DataDHT*>(
      &::sensors::_DataDHT_default_instance_);
}
inline const ::sensors::DataDHT& SensorDHT::data() const {
  // @@protoc_insertion_point(field_get:sensors.SensorDHT.data)
  return _internal_data();
}
inline ::sensors::DataDHT* SensorDHT::release_data() {
  // @@protoc_insertion_point(field_release:sensors.SensorDHT.data)
  
  ::sensors::DataDHT* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::sensors::DataDHT* SensorDHT::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sensors::DataDHT>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::sensors::DataDHT* SensorDHT::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sensors.SensorDHT.data)
  return _internal_mutable_data();
}
inline void SensorDHT::set_allocated_data(::sensors::DataDHT* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:sensors.SensorDHT.data)
}

// -------------------------------------------------------------------

// DataDHT

// float temperature = 1;
inline void DataDHT::clear_temperature() {
  temperature_ = 0;
}
inline float DataDHT::_internal_temperature() const {
  return temperature_;
}
inline float DataDHT::temperature() const {
  // @@protoc_insertion_point(field_get:sensors.DataDHT.temperature)
  return _internal_temperature();
}
inline void DataDHT::_internal_set_temperature(float value) {
  
  temperature_ = value;
}
inline void DataDHT::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:sensors.DataDHT.temperature)
}

// float humidity = 2;
inline void DataDHT::clear_humidity() {
  humidity_ = 0;
}
inline float DataDHT::_internal_humidity() const {
  return humidity_;
}
inline float DataDHT::humidity() const {
  // @@protoc_insertion_point(field_get:sensors.DataDHT.humidity)
  return _internal_humidity();
}
inline void DataDHT::_internal_set_humidity(float value) {
  
  humidity_ = value;
}
inline void DataDHT::set_humidity(float value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:sensors.DataDHT.humidity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensors

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensors_2eproto
